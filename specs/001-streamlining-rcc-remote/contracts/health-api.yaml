openapi: 3.0.3
info:
  title: RCC Remote Health Check API
  description: Health check endpoints for RCC Remote container orchestration
  version: 1.0.0
servers:
  - url: https://rccremote.local:443
    description: RCC Remote server

paths:
  /health/live:
    get:
      summary: Liveness probe endpoint
      description: Returns 200 if the RCC Remote service is alive and can handle requests
      operationId: getLiveness
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Service is not alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /health/ready:
    get:
      summary: Readiness probe endpoint
      description: Returns 200 if the RCC Remote service is ready to serve traffic
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /health/startup:
    get:
      summary: Startup probe endpoint
      description: Returns 200 when the RCC Remote service has completed initialization
      operationId: getStartup
      responses:
        '200':
          description: Service startup complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service still starting up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /metrics:
    get:
      summary: Prometheus metrics endpoint
      description: Returns Prometheus-formatted metrics for monitoring
      operationId: getMetrics
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP rcc_remote_clients_connected Current number of connected RCC clients
                  # TYPE rcc_remote_clients_connected gauge
                  rcc_remote_clients_connected 42
                  # HELP rcc_remote_catalogs_available Number of available environment catalogs
                  # TYPE rcc_remote_catalogs_available gauge
                  rcc_remote_catalogs_available 15

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, starting]
          description: Overall health status
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of health check
        checks:
          type: object
          description: Individual component health checks
          properties:
            rccremote_process:
              $ref: '#/components/schemas/ComponentCheck'
            holotree_available:
              $ref: '#/components/schemas/ComponentCheck'
            ssl_certificates:
              $ref: '#/components/schemas/ComponentCheck'
            storage_volumes:
              $ref: '#/components/schemas/ComponentCheck'
        uptime_seconds:
          type: integer
          description: Service uptime in seconds
          minimum: 0
        client_connections:
          type: integer
          description: Current number of active RCC client connections
          minimum: 0
        catalog_count:
          type: integer
          description: Number of available environment catalogs
          minimum: 0

    ComponentCheck:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [pass, fail, warn]
        message:
          type: string
          description: Human-readable status message
        last_updated:
          type: string
          format: date-time
          description: When this component was last checked